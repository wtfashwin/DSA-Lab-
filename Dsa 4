Aim : Consider an expression tree and postfix / prefix expression. Perform recursive & non recursive in order, pre order and postorder traversals. 


#include<iostream>
using namespace std;
class Node {
	public:
		char data;
		Node *left,*right;
};
class Tree {
	public:
		Node *root;
		Tree() {
			root=NULL;
		}
    
		void inorder_recursive(Node *);
		void preorder_recursive(Node *);
		void postorder_recursive(Node *);
		void inorder_nonrecursive(Node *);
		void preorder_nonrecursive(Node *);
		void postorder_nonrecursive(Node *);
		Node *expression();
};
Node *Tree::expression() {
	Node *temp;
	int i,top=-1;
	char exp[20];
	Node *stack[10];
	int flag[10];
	cout<<"Enter the expression :";
	cin>>exp;
	for(i=0;exp[i]!='\0';i++) {
		if(exp[i]>='a' && exp[i]<='z') {
			temp=new Node;
			temp->data=exp[i];
			temp->left=temp->right=NULL;
			stack[++top]=temp;
		}
		else {
			root=new Node;
			root->data=exp[i];
			root->left=root->right=NULL;
			root->right=stack[top--];
			root->left=stack[top--];
			stack[++top]=root;
		}
	}
	root=stack[top--];
	return root;
}
void Tree::inorder_recursive(Node *root) {
	if(root!=NULL) {
		inorder_recursive(root->left);
		cout<<root->data;
		inorder_recursive(root->right);
	}
}
void Tree::preorder_recursive(Node *root) {
	if(root!=NULL) {
		cout<<root->data;
		preorder_recursive(root->left);
		preorder_recursive(root->right);
	}
}
void Tree::postorder_recursive(Node *root) {
	if(root!=NULL) {
		postorder_recursive(root->left);
		postorder_recursive(root->right);
		cout<<root->data;
	}
}
void Tree::inorder_nonrecursive(Node *root) {
	struct Node *stack[20];
	int top=-1;
	while(root!=NULL||top!=-10) {
		if(root!=NULL) {
			stack[++top]=root;
			root=root->left;
		}
		else {
			root=stack[top--];
			cout<<root->data;
			root=root->right;
		}
	}
}
void Tree::preorder_nonrecursive(Node *root) {
	struct Node *stack[20];
	int top=-1;
	stack[++top]=root;
	while(top!=-1) {
		root=stack[top--];
		if(root!=NULL) {
			cout<<root->data;
			stack[++top]=root->right;
			stack[++top]=root->left;
		}
	}
}                              
void Tree::postorder_nonrecursive(Node *root) {
	struct Node *stack[20];
	int top=-1;
	int flag[10];
	while(top!=-1||root!=NULL) {
		if(root!=NULL) {
			stack[++top]=root;
			flag[top]=0;
			root=root->left;
		}
		else {
			root=stack[top];
			if(flag[top]==1) {
				cout<<root->data;
				top--;
				root=NULL;
			}
			else {
				flag[top]=1;
				root=root->right;
			}
		}
	}
}                     
int main() {
	Tree s;
	s.root=s.expression();
	int ch,ans;
	cout<<"\n1)Recursive inorder";
	cout<<"\n2)Recursive preorder";
	cout<<"\n3)Recursive postorder";
	cout<<"\n4)Non recursive inorder";
	cout<<"\n5)Non recursive preorder";
	cout<<"\n6)Non recursive postorder";
	do {
		cout<<"\nEnter your choice :";
		cin>>ch;
		switch(ch) {
			case 1:
				cout<<"\nInorder expression with recursive =>";
				s.inorder_recursive(s.root);
				break;
			case 2:
				cout<<"\nPreorder expression with recursive =>";
				s.preorder_recursive(s.root);
				break;
			case 3:
				cout<<"\nPostorder expression with recursive =>";
				s.postorder_recursive(s.root);
				break;
			case 4:
				cout<<"\nInorder expression with non recursive =>";
				s.inorder_nonrecursive(s.root);
				break;
			case 5:
				cout<<"\nPreorder expression with non recursive =>";
				s.preorder_nonrecursive(s.root);
				break;
			case 6:
				cout<<"\nPostorder expression with non recursive =>";
				s.postorder_nonrecursive(s.root);
				break;
		}
		cout<<"\nPress 1 to continue";
		cin>>ans;
	}
	while(ans==1);
	return 0;
}
