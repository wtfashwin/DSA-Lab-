Aim : Represent a graph of ur clg campus find MST using 
      1. Kruskal's Algo
      2. Using Prim's Algo 


1)USING PRIMâ€™S ALGORITHM:


#include <iostream>
#include<conio.h>
#include<stdlib.h>
#define infinity 9999
#define max 20
using namespace std;
class graph
{
int g[20][20];
int n;
public:
graph()
{n=0;}
void readgraph();
void printgraph();
int prims(graph &);
};
void graph::readgraph()
{
int i,j;
cout<<"\nenter number of nodes :";
cin>>n;
cout<<"enter matrix:\n";
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
cin>>g[i][j];
}
}
}
void graph::printgraph()
{
int i,j;
for(i=0;i<n;i++)
{
cout<<"\n";
for(j=0;j<n;j++)
{
cout<<""<<g[i][j];
}
}
}
int graph::prims(graph&spanning)
{
int cost[20][20],distance[20],from[20],visited[20];
int u,v,minn,noedges,i,mincost,j;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if (g[i][j]==0)
{
cost[i][j]=infinity;
}
else
{
cost[i][j]=g[i][j];
}
spanning.g[i][j]=0;
}
}
distance[0]=0;visited[0]=1;
for(i=1;i<n;i++)
{
distance[i]=cost[0][i];
from[i]=0;
visited[i]=0;
}
mincost=0;
noedges=n-1;
while(noedges>0)
{
minn=infinity;
for(i=1;i<n;i++)
{
if(visited[i]==0 && distance[i]<minn)
{
v=i;
minn=distance[i];
}
}
u=from[v];
spanning.g[u][v]=distance[v];
spanning.g[v][u]=distance[v];
noedges--;
visited[v]=1;
for(i=0;i<n;i++)
{
if(visited[i]==0 && cost[i][v]<distance[i])
{
distance[i]=cost[i][v];
from[i]=v;
}
}
 mincost=mincost+cost[u][v];
}
spanning.n=n;
 return(mincost);
} 
int main()
{
graph gl,spanning;
gl.readgraph();
int totalcost=gl.prims(spanning);
cout<<"\nspanning tree matrix:\n";
spanning.printgraph();
cout<<"\ntotal cost of spanning the tree using prism's algorithm ="<< totalcost;
return 0;
}
